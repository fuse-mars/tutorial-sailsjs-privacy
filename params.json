{
  "name": "sailsjs privacy",
  "tagline": "Protecting your data using sails policy",
  "body": "# Prerequisite\r\n* Intermediate Knowledge of [Nodejs](https://nodejs.org/en/)\r\n\r\n# Inspiration\r\n[An article](https://kev.inburke.com/kevin/dont-use-sails-or-waterline/) by [@ekrubnivek](https://twitter.com/ekrubnivek) brought to the table, all reasons for **NOT using Sailsjs in production**. However, at [Fusemachines](https://www.fusemachines.com), we have an application written in Sailsjs that handles third part information. So I did some digging and found out that the security concerns mentioned in this article, are no longer a great concern if you know what you are doing. \r\n\r\nFew key points that we followed to continue using Sailsjs (i came up with these by myself by the way).\r\n* An internet application is supposed to be accessible by the public, so it makes sense for Sailsjs team to make **generated routes**, public by default.\r\n* Sailsjs uses expressjs behind the scene, which is a well known nodejs web server!\r\n* Sailsjs team has improved their security policy guidelines, a closed [github issue](https://github.com/balderdashy/sails/issues/2830) has more detail. \r\n\r\n# The good\r\n[Sailsjs](sailsjs.org) is a great framework for building backend applications that serve information through REST API's.\r\nIts [ORM](https://en.wikipedia.org/wiki/Object-role_modeling) makes it very very easy to manage data entry and retrieval. \r\n\r\n# The bad\r\nThe ease for data entry and retrieval is great for development and testing purposes, but really bad for production purposes.\r\n\r\n# Sailsjs Policies\r\nIn short, a **sailsjs policy** is a javascript function that runs **before** any bound controller's action can get executed.\r\nThis function contains logic for *authorization* and *access control*.\r\n\r\nMore info can be found at [sailsjs site](http://sailsjs.org/documentation/concepts/policies)\r\n\r\n# Goal\r\nWe are creating a **secured** app to manage different `teams` in a company.\r\nA team can have a name, a description, and a list of members.\r\n\r\n# Steps\r\n0. Create a new sails app and go inside it.\r\nMake sure your nodejs version is at least v4.4.2 and sailjs is v0.12.1\r\n```\r\nsails new sailsjs-privacy; cd sailsjs-privacy\r\n```\r\n1. Create a team API\r\n```\r\nsails generate api team\r\n```\r\n\r\n2. add some attributes\r\n```javascript\r\nmodule.exports = {\r\n\r\n  attributes: {\r\n  \tname: {\r\n    \ttype: 'string',\r\n        required: true,\r\n    \tunique: true\r\n  \t},\r\n  \tdescription: {\r\n  \t\ttype: 'string',\r\n        required: true,\r\n      \tminLength: 5\r\n  \t},\r\n  \tmembers: {\r\n  \t\ttype: 'array',\r\n        required: true\r\n  \t}\r\n  }\r\n\r\n};\r\n```\r\n\r\n3. run the app and make sure you can access the team API\r\n```\r\nsails lift\r\n```\r\n\r\n4. save some data \r\n```\r\nhttp://localhost:1337/team/create?name=team&description=hi%20there&members[]=mars1&members[]=mars2\r\n```\r\n\r\n5. make sure that the data has ben saved\r\n```\r\nhttp://localhost:1337/team/find\r\n```\r\n\r\n6. create a policy that restrict access to team API\r\n * can only be viewed locally i.e. the calling host is localhost\r\n * can only be viewed if you provide the right authorization code\r\n```\r\n// <root-folder>/api/policies/isAuthenticated.js\r\nmodule.exports = function isAuthenticated(req, res, next) {\r\n\tconst secretCode = 'bearer fusemachines';\r\n\tconst allowedOrigin = 'localhost';\r\n\r\n\tif (req.headers && req.headers.authorization === secretCode &&\r\n\t    req.host === allowedOrigin) {\r\n\t    // user is allowed\r\n    \treturn next();\r\n\t}\r\n\r\n\t// User is not allowed\r\n\treturn res.forbidden('You are not permitted to perform this action.');\r\n};\r\n```\r\n7. use the policy\r\n```javascript\r\n// <root-folder>/config/policies.js\r\nmodule.exports.policies = {\r\n  TeamController: {\r\n    '*': 'isAuthenticated'\r\n  }\r\n};\r\n```\r\n8. restart the app\r\n\r\n9. make sure that you cannot access the team API unless you provide the `authorization code`\r\n```bash\r\n# using curl\r\n# unauthorized access\r\ncurl http://localhost:1337/team\r\n\r\n# authorized access\r\ncurl --header \"authorization: bearer fusemachines\" http://localhost:1337/team\r\n```\r\n\r\n10. We did it!\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}